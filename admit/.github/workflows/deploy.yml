name: Deploy

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: apps/api/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/api:latest
          ghcr.io/${{ github.repository }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Install Railway CLI
        npm install -g @railway/cli

        # Deploy API service
        railway login --token $RAILWAY_TOKEN
        railway environment --name production
        cd apps/api
        railway up --service api

  deploy-ui:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/reviewer-ui/package-lock.json

    - name: Install dependencies
      run: |
        cd apps/reviewer-ui
        npm ci

    - name: Build application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      run: |
        cd apps/reviewer-ui
        npm run build

    - name: Deploy to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: apps/reviewer-ui

  deploy-mobile:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[mobile]')
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/mobile/package-lock.json

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      run: |
        cd apps/mobile
        npm ci

    - name: Build and submit to stores
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        cd apps/mobile
        # Build for app stores
        expo build:android --release-channel production
        expo build:ios --release-channel production

        # Submit to stores (optional)
        # expo upload:android --release-channel production
        # expo upload:ios --release-channel production

  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-ui]
    if: always()

    steps:
    - name: Run health checks
      env:
        API_URL: ${{ secrets.API_URL }}
        UI_URL: ${{ secrets.UI_URL }}
      run: |
        # Check API health
        echo "Checking API health..."
        curl -f "$API_URL/health" || exit 1

        # Check UI availability
        echo "Checking UI availability..."
        curl -f "$UI_URL" || exit 1

        echo "All services are healthy!"

    - name: Update database schema (if needed)
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        # This would run any pending migrations
        echo "Checking for schema updates..."
        # psql $DATABASE_URL -f infra/sql/migrate.sql

    - name: Warm up services
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        # Warm up API with some basic requests
        echo "Warming up API..."
        curl -s "$API_URL/api/v1/programs/stats/summary" > /dev/null
        echo "API warmed up successfully!"

    - name: Send deployment notification
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        COMMIT_SHA: ${{ github.sha }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        AUTHOR: ${{ github.event.head_commit.author.name }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [{
              "color": "good",
              "title": "ðŸš€ Deployment Successful",
              "fields": [
                {"title": "Commit", "value": "'$COMMIT_SHA'", "short": true},
                {"title": "Author", "value": "'$AUTHOR'", "short": true},
                {"title": "Message", "value": "'$COMMIT_MESSAGE'", "short": false}
              ],
              "footer": "Graduate Admissions Platform",
              "ts": '$(date +%s)'
            }]
          }' \
          $WEBHOOK_URL || echo "Notification failed"